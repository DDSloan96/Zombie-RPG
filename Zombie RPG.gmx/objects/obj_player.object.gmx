<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_speed = 5;
player_health = 100;

mirror = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with(instance_create(x,y,obj_bullet)){
    direction=point_direction(x,y,mouse_x,mouse_y)+90;;
    image_angle = direction;
    phy_speed_x=bullet_speed*sin(degtorad(direction));
    phy_speed_y=bullet_speed*cos(degtorad(direction));
}

//I think this doesnt work unless you have pro!!!



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
/// Handle Input Logic

//keep player from moving when nothing is pressed
vspeed = 0;
hspeed = 0;

//Keeps player in room DO NOT CHANGE THE INTEGERS HERE


//keep the player at standard position if he is not moving
if !keyboard_check(vk_anykey)
{
    sprite_index = spr_player;
}

// player movement
    //up
if keyboard_check(ord("W"))
{
    vspeed -= player_speed;
    sprite_index = spr_player_movement;
    image_speed = .3; 
      
}

    //down
if keyboard_check(ord("S"))
{
    vspeed += player_speed;
    sprite_index = spr_player_movement;
    image_speed = .3;
        
}
    
    //right
if keyboard_check(ord("D"))
{
    hspeed += player_speed;
    sprite_index = spr_player_movement;
    image_speed = .3;
        
}
    
    //left
if keyboard_check(ord("A"))
{
    hspeed -= player_speed;
    sprite_index = spr_player_movement;
    image_speed = .3;
    mirror = true;
        
}

else
{
    mirror = false;
}

//mirror the sprite to make it seem like it's facing the opposite way
if mirror = true
{
    image_xscale = -1;
}

else
{
    image_xscale = 1;
}

*/
// Physics for movement with room and character physics enabled
// Handle Input Logic
phy_position_x=clamp(x,12,room_width-11);
phy_position_y=clamp(y,21,room_height-23);
//keep player from moving when nothing is pressed


//keep the player at standard position if he is not moving
if !keyboard_check(vk_anykey)
{
    image_index=0;
}


// UP
if (keyboard_check(ord("W")))
{
    sprite_index = spr_player_up;
    phy_position_y -= player_speed;
    //vspeed -= player_speed;
    image_speed = .3;
    
}

// DOWN
if (keyboard_check(ord("S")))
{
    sprite_index = spr_player_down;
    phy_position_y += player_speed;
    //vspeed += player_speed;
    image_speed = .3;
    
}

// LEFT
if (keyboard_check(ord("A")))
{
    sprite_index = spr_player_left;
    phy_position_x -= player_speed;
   //hspeed -= player_speed;
    image_speed = .3;
       
}

// RIGHT
if (keyboard_check(ord("D")))
{
    sprite_index = spr_player_right;  
    phy_position_x += player_speed;
    //hspeed += player_speed;
    image_speed = .3;
     
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_TempTree">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Collision Script test
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parent_middle_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious; 
y = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parent_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious; 
y = yprevious;

var p_dir;
p_dir = point_direction(other.x, other.y, x, y);
while(place_meeting(x, y, other))
{
x += lengthdir_x(0.5, p_dir);
y += lengthdir_y(0.5, p_dir);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alarm[0] = -1
{
    alarm[0] = 8
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>14,20</point>
    <point>19,27</point>
  </PhysicsShapePoints>
</object>
